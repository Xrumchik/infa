// –¢–∏–ø—ã –æ–¥–µ–∂–¥—ã
export const CLOTHING_TYPES = [
  { id: 'shirt', name: '–†—É–±–∞—à–∫–∞', icon: 'üëî', category: 'top' },
  { id: 'tshirt', name: '–§—É—Ç–±–æ–ª–∫–∞', icon: 'üëï', category: 'top' },
  { id: 'sweater', name: '–ö–æ—Ñ—Ç–∞', icon: 'üß•', category: 'top' },
  { id: 'jacket', name: '–ö—É—Ä—Ç–∫–∞', icon: 'üß•', category: 'outer' },
  { id: 'jeans', name: '–î–∂–∏–Ω—Å—ã', icon: 'üëñ', category: 'bottom' },
  { id: 'pants', name: '–ë—Ä—é–∫–∏', icon: 'üëî', category: 'bottom' },
  { id: 'shorts', name: '–®–æ—Ä—Ç—ã', icon: 'ü©≥', category: 'bottom' },
  { id: 'skirt', name: '–Æ–±–∫–∞', icon: 'üëó', category: 'bottom' },
  { id: 'dress', name: '–ü–ª–∞—Ç—å–µ', icon: 'üëó', category: 'dress' },
  { id: 'sneakers', name: '–ö—Ä–æ—Å—Å–æ–≤–∫–∏', icon: 'üëü', category: 'shoes' },
  { id: 'boots', name: '–ë–æ—Ç–∏–Ω–∫–∏', icon: 'üë¢', category: 'shoes' },
  { id: 'sandals', name: '–°–∞–Ω–¥–∞–ª–∏–∏', icon: 'üë°', category: 'shoes' },
  { id: 'heels', name: '–ö–∞–±–ª—É–∫–∏', icon: 'üë†', category: 'shoes' },
  { id: 'hat', name: '–®–∞–ø–∫–∞', icon: 'üé©', category: 'accessory' },
  { id: 'bag', name: '–°—É–º–∫–∞', icon: 'üëú', category: 'accessory' },
  { id: 'watch', name: '–ß–∞—Å—ã', icon: '‚åö', category: 'accessory' }
];

// –ü—Ä–∞–≤–∏–ª–∞ —Å—Ç–∏–ª–µ–≤–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const STYLE_RULES = [
  {
    items: ['sneakers', 'dress'],
    score: 40,
    message: '–ö—Ä–æ—Å—Å–æ–≤–∫–∏ —Å –ø–ª–∞—Ç—å–µ–º –º–æ–≥—É—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç—É—Ñ–ª–∏ –¥–ª—è –±–æ–ª–µ–µ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞.'
  },
  {
    items: ['shorts', 'jacket'],
    score: 60,
    message: '–®–æ—Ä—Ç—ã —Å –ø–∏–¥–∂–∞–∫–æ–º —Å–æ–∑–¥–∞—é—Ç —Å–º–µ—à–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π. –ü–æ–¥–æ–π–¥–µ—Ç –¥–ª—è casual-smart –æ–±—Ä–∞–∑–∞.'
  },
  {
    items: ['jeans', 'shirt'],
    score: 85,
    message: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –¥–∂–∏–Ω—Å–æ–≤ –∏ —Ä—É–±–∞—à–∫–∏ - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä.'
  },
  {
    items: ['tshirt', 'jeans'],
    score: 90,
    message: '–ò–¥–µ–∞–ª—å–Ω–æ–µ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ —Ñ—É—Ç–±–æ–ª–∫–∏ –∏ –¥–∂–∏–Ω—Å–æ–≤.'
  },
  {
    items: ['dress', 'heels'],
    score: 95,
    message: '–ü–ª–∞—Ç—å–µ —Å –∫–∞–±–ª—É–∫–∞–º–∏ - —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ –∏ –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ.'
  },
  {
    items: ['pants', 'shirt'],
    score: 88,
    message: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –±—Ä—é–∫–∏ —Å —Ä—É–±–∞—à–∫–æ–π –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –¥–µ–ª–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á.'
  }
];

// –¶–≤–µ—Ç–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
export const COLOR_HARMONY_RULES = [
  {
    name: '–ú–æ–Ω–æ—Ö—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–∞—Ä–º–æ–Ω–∏—è',
    check: (colors) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ª–∏ —Ü–≤–µ—Ç–∞ –≤ –æ–¥–Ω–æ–π —Ü–≤–µ—Ç–æ–≤–æ–π –≥—Ä—É–ø–ø–µ
      const hues = colors.map(c => rgbToHsl(c.r, c.g, c.b)[0]);
      const range = Math.max(...hues) - Math.min(...hues);
      return range < 30;
    },
    score: 85,
    message: '–¶–≤–µ—Ç–∞ —Ö–æ—Ä–æ—à–æ —Å–æ—á–µ—Ç–∞—é—Ç—Å—è –≤ –æ–¥–Ω–æ–π —Ü–≤–µ—Ç–æ–≤–æ–π –≥–∞–º–º–µ'
  },
  {
    name: '–ö–æ–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–∞—è –≥–∞—Ä–º–æ–Ω–∏—è',
    check: (colors) => {
      if (colors.length < 2) return false;
      const hues = colors.map(c => rgbToHsl(c.r, c.g, c.b)[0]);
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–µ —Ü–≤–µ—Ç–∞ (—Ä–∞–∑–Ω–∏—Ü–∞ ~180¬∞)
      for (let i = 0; i < hues.length; i++) {
        for (let j = i + 1; j < hues.length; j++) {
          const diff = Math.abs(hues[i] - hues[j]);
          if (Math.abs(diff - 180) < 30 || Math.abs(diff - 180) > 330) {
            return true;
          }
        }
      }
      return false;
    },
    score: 80,
    message: '–ö–æ–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–µ —Ü–≤–µ—Ç–∞ —Å–æ–∑–¥–∞—é—Ç —è—Ä–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç'
  },
  {
    name: '–ê–Ω–∞–ª–æ–≥–∏—á–µ—Å–∫–∞—è –≥–∞—Ä–º–æ–Ω–∏—è',
    check: (colors) => {
      if (colors.length < 2) return false;
      const hues = colors.map(c => rgbToHsl(c.r, c.g, c.b)[0]);
      hues.sort((a, b) => a - b);
      
      for (let i = 1; i < hues.length; i++) {
        if (hues[i] - hues[i-1] > 60) return false;
      }
      return true;
    },
    score: 90,
    message: '–ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ —Ü–≤–µ—Ç–∞ —Å–æ–∑–¥–∞—é—Ç –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ'
  }
];

// –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ RGB –≤ HSL
export function rgbToHsl(r, g, b) {
  r /= 255;
  g /= 255;
  b /= 255;

  const max = Math.max(r, g, b);
  const min = Math.min(r, g, b);
  let h, s, l = (max + min) / 2;

  if (max === min) {
    h = s = 0;
  } else {
    const d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    
    switch (max) {
      case r: h = (g - b) / d + (g < b ? 6 : 0); break;
      case g: h = (b - r) / d + 2; break;
      case b: h = (r - g) / d + 4; break;
    }
    h /= 6;
  }

  return [h * 360, s * 100, l * 100];
}

// –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ü–≤–µ—Ç–æ–≤
export function analyzeColorCompatibility(userColors, clothingColors) {
  const allClothingColors = Object.values(clothingColors).flat();
  const allColors = [...userColors, ...allClothingColors];
  
  let bestRule = null;
  let maxScore = 0;
  
  for (const rule of COLOR_HARMONY_RULES) {
    if (rule.check(allColors)) {
      if (rule.score > maxScore) {
        maxScore = rule.score;
        bestRule = rule;
      }
    }
  }
  
  if (bestRule) {
    return {
      score: bestRule.score,
      description: bestRule.message,
      rule: bestRule.name
    };
  }
  
  // –ï—Å–ª–∏ –Ω–∏–∫–∞–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –Ω–µ –ø–æ–¥–æ—à–ª–∏, –¥–∞–µ–º –±–∞–∑–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
  const avgLightness = allColors.reduce((sum, color) => {
    const [,, l] = rgbToHsl(color.r, color.g, color.b);
    return sum + l;
  }, 0) / allColors.length;
  
  const score = avgLightness > 20 && avgLightness < 80 ? 65 : 45;
  
  return {
    score,
    description: score > 60 ? '–¶–≤–µ—Ç–∞ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã –∏ —Å–æ—á–µ—Ç–∞—é—Ç—Å—è' : '–¶–≤–µ—Ç–∞ –º–æ–≥—É—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º',
    rule: '–ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞'
  };
}

// –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª–µ–≤–æ–π –≥–∞—Ä–º–æ–Ω–∏–∏
export function analyzeStyleHarmony(selectedClothing) {
  let totalScore = 0;
  let ruleCount = 0;
  const appliedRules = [];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–¥–µ–∂–¥—ã
  for (const rule of STYLE_RULES) {
    const hasAllItems = rule.items.every(item => selectedClothing.includes(item));
    if (hasAllItems) {
      totalScore += rule.score;
      ruleCount++;
      appliedRules.push(rule);
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª, –¥–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É
  if (ruleCount === 0) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const categories = selectedClothing.map(id => {
      const item = CLOTHING_TYPES.find(t => t.id === id);
      return item ? item.category : 'unknown';
    });
    
    const hasTop = categories.includes('top');
    const hasBottom = categories.includes('bottom') || categories.includes('dress');
    const hasShoes = categories.includes('shoes');
    
    let baseScore = 70;
    if (hasTop && hasBottom && hasShoes) baseScore = 85;
    else if (hasTop && hasBottom) baseScore = 80;
    else if (categories.includes('dress') && hasShoes) baseScore = 82;
    
    return {
      score: baseScore,
      description: '–ë–∞–∑–æ–≤–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≥–∞—Ä–¥–µ—Ä–æ–±–∞',
      appliedRules: []
    };
  }
  
  const avgScore = totalScore / ruleCount;
  const bestRule = appliedRules.reduce((best, current) => 
    current.score > best.score ? current : best
  );
  
  return {
    score: Math.round(avgScore),
    description: bestRule.message,
    appliedRules
  };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
export function generateRecommendations(colorAnalysis, styleAnalysis, selectedClothing) {
  const recommendations = [];
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–≤–µ—Ç–∞–º
  if (colorAnalysis.score < 70) {
    recommendations.push({
      type: 'warning',
      title: '–¶–≤–µ—Ç–æ–≤–∞—è –≥–∞—Ä–º–æ–Ω–∏—è',
      message: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –∏–ª–∏ –≥–∞—Ä–º–æ–Ω–∏—Ä—É—é—â–∏–µ –æ—Ç—Ç–µ–Ω–∫–∏. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –º–æ–Ω–æ—Ö—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è.'
    });
  } else if (colorAnalysis.score >= 85) {
    recommendations.push({
      type: 'positive',
      title: '–û—Ç–ª–∏—á–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è –≥–∞—Ä–º–æ–Ω–∏—è',
      message: '–¶–≤–µ—Ç–∞ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ —Å–æ—á–µ—Ç–∞—é—Ç—Å—è –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º!'
    });
  }
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é
  if (styleAnalysis.score < 70) {
    recommendations.push({
      type: 'negative',
      title: '–°—Ç–∏–ª–µ–≤–æ–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ',
      message: '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ —Å–æ—á–µ—Ç–∞—é—Ç—Å—è –ø–æ —Å—Ç–∏–ª—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–∑.'
    });
  } else if (styleAnalysis.score >= 85) {
    recommendations.push({
      type: 'positive',
      title: '–ì–∞—Ä–º–æ–Ω–∏—á–Ω—ã–π —Å—Ç–∏–ª—å',
      message: '–≠–ª–µ–º–µ–Ω—Ç—ã –æ–¥–µ–∂–¥—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ –¥–æ–ø–æ–ª–Ω—è—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞!'
    });
  }
  
  // –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (selectedClothing.includes('sneakers') && selectedClothing.includes('dress')) {
    recommendations.push({
      type: 'warning',
      title: '–ö—Ä–æ—Å—Å–æ–≤–∫–∏ —Å –ø–ª–∞—Ç—å–µ–º',
      message: '–¢–∞–∫–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç–∏–ª—å–Ω—ã–º –≤ casual –æ–±—Ä–∞–∑–µ, –Ω–æ –¥–ª—è –±–æ–ª–µ–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç—É—Ñ–ª–∏.'
    });
  }
  
  if (selectedClothing.includes('shorts') && selectedClothing.includes('jacket')) {
    recommendations.push({
      type: 'warning',
      title: '–°–º–µ—à–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π',
      message: '–®–æ—Ä—Ç—ã —Å –ø–∏–¥–∂–∞–∫–æ–º - —Å–º–µ–ª–æ–µ —Ä–µ—à–µ–Ω–∏–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç —ç—Ç–æ—Ç —Å—Ç–∏–ª—å.'
    });
  }
  
  return recommendations;
}